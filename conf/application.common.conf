
play.http.forwarded.enabled = true

play.filters {

  # CSRF configuration
  csrf {
    cookie {
      # Name of the CSRF token cookie (set only if non-null)
      name     = "csrfCookie"
      # Whether the CSRF cookie should be marked secure (use true behind HTTPS)
      secure   = false  # <-- ⚠ Set to true in production if behind HTTPS proxy
      # Whether the CSRF cookie is HTTP-only (set to true unless accessed via JS)
      httpOnly = false # Consider httpOnly = true unless your frontend (JS) needs to read the cookie — CSRF cookies usually don’t need to be accessible from JS.
    }

    # Whether to bypass CSRF check if CORS check is satisfied
    bypassCorsTrustedOrigins = false

    header {
      # Name of the header to read the CSRF token from
      name = "Csrf-Token"
    }
  }

  # CORS configuration
  cors {
    # Path prefixes where CORS is enabled
    pathPrefixes = ["/"]

    # List of allowed origins (empty means none allowed)
    # means no different frontend as play serves the ui
    # means no cross-origin requests are allowed. If you’re using a frontend app on a different domain or port (e.g. React on localhost:3000), you must whitelist it:
    #["http://localhost:3000", "https://your-frontend.com"]
    allowedOrigins = []

    # Whether to support credentials in CORS requests
    supportsCredentials = true # means the frontend must use credentials: 'include' when making fetch/ajax calls.

    # Allowed HTTP methods for CORS
    allowedHttpMethods = [
      "GET",
      "POST",
      "PUT",
      "OPTIONS",
      "DELETE"
    ]

    # Allowed HTTP headers for CORS
    allowedHttpHeaders = [
      "Accept",
      "Origin",
      "Content-Type",
      "X-Auth-Token",
      "X-AUTH-YW-API-TOKEN",
      ${play.filters.csrf.header.name}
    ]
  }
}

# Also make sure that your proxy preserves the Origin, Referer, and CSRF headers during forwarding.